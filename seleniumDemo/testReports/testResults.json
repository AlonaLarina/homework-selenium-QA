{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2022-04-01T19:54:44.256Z",
    "end": "2022-04-01T19:55:09.208Z",
    "duration": 24952,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "070a47f5-24a4-4a54-93bd-9f27eedadca7",
      "title": "",
      "fullFile": "C:\\Users\\USER\\Desktop\\seleniumDemo\\testIf\\headingQACheck.js",
      "file": "\\testIf\\headingQACheck.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d24495a7-207a-4bab-b75c-2a4c81d44898",
          "title": "Navigate to QA vacancy and check the correctness of the job title for QA",
          "fullFile": "C:\\Users\\USER\\Desktop\\seleniumDemo\\testIf\\headingQACheck.js",
          "file": "\\testIf\\headingQACheck.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Make sure the title matches the given expectations",
              "fullTitle": "Navigate to QA vacancy and check the correctness of the job title for QA Make sure the title matches the given expectations",
              "timedOut": null,
              "duration": 24428,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//launch the browser\n        let driver = await new Builder().forBrowser(\"firefox\").build();\n        driver.manage().window().maximize();\n        //navigate to IF application (1)\n        const url = \"https://www.if.lv/\";\n        await driver.get(url);\n        //---------------- accepting cookies ----------------\n        //wait 5 sec, and try to search Piekritu button and click\n        await driver.sleep(5000);\n        //search parent panel\n        var cookieBanner = driver\n        .findElement(By.xpath(\"//*[@id='onetrust-banner-sdk' and @class='otFlat top vertical-align-content']\"));\n        if (cookieBanner == null) throw \"The cookie accept banner not found\";\n        else {\n            await driver\n            .findElement(By.xpath(\"//*[@id='onetrust-accept-btn-handler' and text()='Piekrītu']\"))\n            .click();\n        }\n        //---------------- cookies accepted ------------------\n        //navigate to Par If menu (2)\n        var menuParIf = await driver.findElement(By.linkText(\"Par If\"));\n        if (menuParIf == null) throw \"Par if menu not found\";\n        else {\n            menuParIf.click();\n        }\n        //navigate to Darbs If menu (3)\n        await driver.findElement(By.linkText(\"Darbs If\")).click();\n        //navigate to Vakances menu (4)\n        await driver.findElement(By.linkText(\"Vakances\")).click();\n        \n        //---------------------- HEADING ---------------------------\n        //click the button that would lead to Quality Assurance/Test Automation Specialist (5)\n        //make sure that the heading is “Quality Assurance/Test Automation Specialist (6)\n        var headingQAexpected = \"Quality Assurance/Test Automation Specialist\";\n        var xpathLinkQA = \"//*[contains(@href, '/par-if/darbs-if/vakances/QA-test-automation-specialist')]\";\n        var xpathForParentLiQA = xpathLinkQA + \"/parent::li[@class='if navigational-card lifestyle']\";\n        //await driver.findElement(By.xpath(xpathForParentLiQA + \"/div/p[contains(text(),'\" + headingQAexpected + \"')]\")).click();\n        \n        let headingQA = await driver\n        .findElement(By.xpath(xpathForParentLiQA + \"/div/p[2]\"))\n        .getText().then(function (value) {\n        return value\n        });\n        //--------------------- scroll page into view --------------\n        var liParentElement = driver.findElement(By.xpath(xpathForParentLiQA));\n        driver.executeScript(\"arguments[0].scrollIntoView()\", liParentElement);\n        driver.sleep(300);\n        //----------------------------scrolled----------------------\n        //-------------- taking a screenshot of current page -------\n        driver.takeScreenshot().then(\n            function(image) {\n                require('fs').writeFileSync('my_captured_image_1-01_vakances.png', image, 'base64');\n            });\n        //--------- see screenshot in seleniumDemo folder -----------\n        //--------------- option 1 ------------------\n        try {\n            //assert using chai should\n            //headingQA.should.equal(headingQAexpected)\n            //assert.strictEqual(headingQA,headingQAexpected)\n            if (headingQA.should.equal(headingQAexpected)) {\n                // good path if heading = \"Quality Assurance/Test Automation Specialist\"\n                await driver.findElement(By.xpath(xpathLinkQA)).click();\n                \n                //-------------- taking a screenshot of current page -------\n                driver.takeScreenshot().then(\n                function(image) {\n                    require('fs').writeFileSync('my_captured_image_1-11_quality.png', image, 'base64');\n                });\n                //--------- see screenshot in seleniumDemo folder -----------\n                //it is good to close the browser at the end\n                await driver.quit();\n            }\n            return true;\n            } \n            catch (e) { //AssertionError\n                // Catch block\n                //handle the failure of test, take a screenshot of the current page (7)\n                //-------------- taking a screenshot of current page -------\n        \n                driver.takeScreenshot().then(\n                function(image) {\n                    require('fs').writeFileSync('my_captured_image_1-12_QA.png', image, 'base64');\n                });\n            \n                //--------- see screenshot in seleniumDemo folder -----------\n                await driver.sleep(2000);\n                await driver.quit();\n                \n                throw new Error(\"AssertionError: expected '\" + headingQA + \"' to equal '\" + headingQAexpected + \"'. Result: (+) Expected: \" + headingQAexpected + \" // (-) Actual: \" + headingQA + \" ¯\\_(ツ)_/¯\");\n            }\n        //------------ end of option 1 --------------",
              "err": {
                "message": "Error: AssertionError: expected 'QA / Test Automation Specialist' to equal 'Quality Assurance/Test Automation Specialist'. Result: (+) Expected: Quality Assurance/Test Automation Specialist // (-) Actual: QA / Test Automation Specialist ¯_(ツ)_/¯",
                "estack": "Error: AssertionError: expected 'QA / Test Automation Specialist' to equal 'Quality Assurance/Test Automation Specialist'. Result: (+) Expected: Quality Assurance/Test Automation Specialist // (-) Actual: QA / Test Automation Specialist ¯_(ツ)_/¯\n    at Context.<anonymous> (testIf\\headingQACheck.js:118:23)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "41535947-c6de-4f37-8753-c142f753c4b3",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "41535947-c6de-4f37-8753-c142f753c4b3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 24428,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "/Users/USER/Desktop/seleniumDemo/testReports",
        "reportFilename": "testResults"
      },
      "version": "6.2.0"
    }
  }
}